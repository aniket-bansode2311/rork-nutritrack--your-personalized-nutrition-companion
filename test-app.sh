#!/bin/bash

# Comprehensive App Testing Script
# This script runs all tests and checks for the entire application

echo \"🚀 Starting comprehensive app testing...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    if [ $2 -eq 0 ]; then\n        echo -e \"${GREEN}✅ $1${NC}\"\n    else\n        echo -e \"${RED}❌ $1${NC}\"\n    fi\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\nprint_info() {\n    echo -e \"${YELLOW}ℹ️  $1${NC}\"\n}\n\n# Test counters\nTOTAL_TESTS=0\nPASSED_TESTS=0\nFAILED_TESTS=0\n\n# Function to run test and track results\nrun_test() {\n    local test_name=\"$1\"\n    local test_command=\"$2\"\n    \n    print_info \"Running: $test_name\"\n    \n    if eval \"$test_command\" > /dev/null 2>&1; then\n        print_status \"$test_name\" 0\n        ((PASSED_TESTS++))\n    else\n        print_status \"$test_name\" 1\n        ((FAILED_TESTS++))\n    fi\n    \n    ((TOTAL_TESTS++))\n}\n\necho \"📋 Test Plan:\"\necho \"1. TypeScript compilation check\"\necho \"2. Linting check\"\necho \"3. Unit tests\"\necho \"4. Component tests\"\necho \"5. Integration tests\"\necho \"6. Routing tests\"\necho \"7. Performance tests\"\necho \"8. Accessibility tests\"\necho \"\"\n\n# 1. TypeScript Compilation Check\nprint_info \"Checking TypeScript compilation...\"\nif npx tsc --noEmit > /dev/null 2>&1; then\n    print_status \"TypeScript compilation\" 0\n    ((PASSED_TESTS++))\nelse\n    print_status \"TypeScript compilation\" 1\n    print_warning \"TypeScript errors found. Run 'npx tsc --noEmit' for details.\"\n    ((FAILED_TESTS++))\nfi\n((TOTAL_TESTS++))\n\n# 2. Linting Check\nprint_info \"Running ESLint...\"\nif npx eslint . --ext .ts,.tsx --quiet > /dev/null 2>&1; then\n    print_status \"ESLint check\" 0\n    ((PASSED_TESTS++))\nelse\n    print_status \"ESLint check\" 1\n    print_warning \"Linting errors found. Run 'npx eslint . --ext .ts,.tsx' for details.\"\n    ((FAILED_TESTS++))\nfi\n((TOTAL_TESTS++))\n\n# 3. Unit Tests\nrun_test \"Unit Tests - Auth Hook\" \"npm test -- __tests__/hooks/useAuth.test.ts\"\nrun_test \"Unit Tests - Nutrition Store\" \"npm test -- __tests__/hooks/useNutritionStore.test.tsx\"\nrun_test \"Unit Tests - Data Operations\" \"npm test -- __tests__/lib/data-operations.test.ts\"\n\n# 4. Component Tests\nrun_test \"Component Tests - FoodItemRow\" \"npm test -- __tests__/components/FoodItemRow.test.tsx\"\n\n# 5. Integration Tests\nrun_test \"Navigation Tests\" \"npm test -- __tests__/routing/navigation.test.tsx\"\nrun_test \"App Functionality Tests\" \"npm test -- __tests__/functionality/app-functionality.test.tsx\"\n\n# 6. Routing Tests\nprint_info \"Testing routing configuration...\"\nROUTING_ERRORS=0\n\n# Check if all required route files exist\nROUTE_FILES=(\n    \"app/_layout.tsx\"\n    \"app/(tabs)/_layout.tsx\"\n    \"app/(auth)/_layout.tsx\"\n    \"app/(tabs)/index.tsx\"\n    \"app/(tabs)/diary.tsx\"\n    \"app/(tabs)/recipes.tsx\"\n    \"app/(tabs)/settings.tsx\"\n    \"app/add-food.tsx\"\n    \"app/profile.tsx\"\n    \"app/ai-food-scan.tsx\"\n    \"app/barcode-scanner.tsx\"\n)\n\nfor route in \"${ROUTE_FILES[@]}\"; do\n    if [ -f \"$route\" ]; then\n        print_status \"Route exists: $route\" 0\n    else\n        print_status \"Route missing: $route\" 1\n        ((ROUTING_ERRORS++))\n    fi\ndone\n\nif [ $ROUTING_ERRORS -eq 0 ]; then\n    print_status \"Routing configuration\" 0\n    ((PASSED_TESTS++))\nelse\n    print_status \"Routing configuration\" 1\n    ((FAILED_TESTS++))\nfi\n((TOTAL_TESTS++))\n\n# 7. Performance Tests\nprint_info \"Checking for performance issues...\"\nPERF_ISSUES=0\n\n# Check for potential performance issues in code\nif grep -r \"console.log\" app/ --include=\"*.tsx\" --include=\"*.ts\" > /dev/null 2>&1; then\n    print_warning \"Found console.log statements in production code\"\n    ((PERF_ISSUES++))\nfi\n\nif grep -r \"any\" app/ --include=\"*.tsx\" --include=\"*.ts\" | grep -v \"test\" > /dev/null 2>&1; then\n    print_warning \"Found 'any' types in code (potential type safety issues)\"\n    ((PERF_ISSUES++))\nfi\n\n# Check for large bundle size indicators\nif find app/ -name \"*.tsx\" -o -name \"*.ts\" | xargs wc -l | tail -1 | awk '{print $1}' | awk '$1 > 10000 {exit 1}'; then\n    print_status \"Code size check\" 0\nelse\n    print_warning \"Large codebase detected (>10k lines)\"\n    ((PERF_ISSUES++))\nfi\n\nif [ $PERF_ISSUES -eq 0 ]; then\n    print_status \"Performance checks\" 0\n    ((PASSED_TESTS++))\nelse\n    print_status \"Performance checks\" 1\n    ((FAILED_TESTS++))\nfi\n((TOTAL_TESTS++))\n\n# 8. Accessibility Tests\nprint_info \"Checking accessibility compliance...\"\nA11Y_ISSUES=0\n\n# Check for accessibility attributes\nif grep -r \"testID\" app/ --include=\"*.tsx\" > /dev/null 2>&1; then\n    print_status \"TestID attributes found\" 0\nelse\n    print_warning \"No testID attributes found for testing\"\n    ((A11Y_ISSUES++))\nfi\n\nif grep -r \"accessibilityLabel\" app/ --include=\"*.tsx\" > /dev/null 2>&1; then\n    print_status \"Accessibility labels found\" 0\nelse\n    print_warning \"No accessibility labels found\"\n    ((A11Y_ISSUES++))\nfi\n\nif [ $A11Y_ISSUES -eq 0 ]; then\n    print_status \"Accessibility checks\" 0\n    ((PASSED_TESTS++))\nelse\n    print_status \"Accessibility checks\" 1\n    ((FAILED_TESTS++))\nfi\n((TOTAL_TESTS++))\n\n# Summary\necho \"\"\necho \"📊 Test Summary:\"\necho \"Total Tests: $TOTAL_TESTS\"\necho \"Passed: $PASSED_TESTS\"\necho \"Failed: $FAILED_TESTS\"\n\nif [ $FAILED_TESTS -eq 0 ]; then\n    echo -e \"${GREEN}🎉 All tests passed! App is ready for production.${NC}\"\n    exit 0\nelse\n    echo -e \"${RED}💥 $FAILED_TESTS test(s) failed. Please fix the issues before deployment.${NC}\"\n    exit 1\nfi